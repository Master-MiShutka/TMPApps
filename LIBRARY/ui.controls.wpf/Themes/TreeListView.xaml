<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:TMP.UI.Controls.WPF"
    xmlns:treelistview="clr-namespace:TMP.UI.Controls.WPF.TreeListView">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ui.controls.wpf;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/ui.controls.wpf;component/Themes/ExpandCollapseButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type treelistview:RowExpander}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treelistview:RowExpander}">
                    <ToggleButton
                        x:Name="Expander"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"
                        Margin="{Binding Path=DataContext.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ClickMode="Press"
                        IsChecked="{Binding Path=DataContext.IsExpanded, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        Visibility="{Binding Path=DataContext.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type treelistview:TreeListView}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                                <local:NoData Margin="5" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="SeparatorStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Width="1"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Stretch"
                        Stroke="{DynamicResource GrayBrush6}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TreeListViewItemTemplate" TargetType="{x:Type treelistview:TreeListViewItem}">
        <Border
            x:Name="Bd"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="true">
            <Grid>
                <local:GridViewRowPresenterWithGridLines
                    Margin="{TemplateBinding Padding}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Columns="{TemplateBinding GridView.ColumnCollection}"
                    SeparatorStyle="{StaticResource SeparatorStyle}">
                    <local:GridViewRowPresenterWithGridLines.Resources>
                        <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}, Path=Foreground}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListView}}}" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource GrayNormalBrush}" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListView}}}" Value="False" />
                                        <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </local:GridViewRowPresenterWithGridLines.Resources>
                </local:GridViewRowPresenterWithGridLines>
                <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                <Rectangle
                    Height="1"
                    VerticalAlignment="Bottom"
                    Stroke="{DynamicResource GrayBrush6}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="WhiteSmoke" />
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentColorBrush2}" />
                <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentColorBrush3}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentBaseColorBrush}" />
                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush7}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type treelistview:TreeListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0,2" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource GrayBrush1}" />
        <Setter Property="Visibility" Value="{Binding Path=IsMatch, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
        <Setter Property="Template" Value="{StaticResource TreeListViewItemTemplate}" />
    </Style>
</ResourceDictionary>
