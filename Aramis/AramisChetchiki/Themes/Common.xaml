<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:cm="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:converters="clr-namespace:TMP.UI.Controls.WPF.Converters;assembly=ui.controls.wpf"
    xmlns:custom_filters="clr-namespace:TMP.WORK.AramisChetchiki.CustomFilters"
    xmlns:extensions="clr-namespace:TMP.Extensions;assembly=TMP.Extensions"
    xmlns:local_controls="clr-namespace:TMP.WORK.AramisChetchiki.Controls"
    xmlns:local_converters="clr-namespace:TMP.WORK.AramisChetchiki.Converters"
    xmlns:local_extensions="clr-namespace:TMP.WORK.AramisChetchiki.Extensions"
    xmlns:model="clr-namespace:TMP.WORK.AramisChetchiki.Model"
    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">

    <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter" />
    <converters:ParametersToOneConverter x:Key="ParametersToOneConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:EnumBindingConverter x:Key="EnumBindingConverter" />
    <converters:RemoveSpacesInTextConverter x:Key="TextSpaceToNewLineConverter" />
    <converters:UnderLineTextToSpaceConverter x:Key="TextSpaceConverter" />

    <local_converters:PassThroughConverter x:Key="PassThroughConverter" />
    <local_converters:ConverterForUpdateTableFieldDisplayOrder x:Key="ConverterForUpdateTableFieldDisplayOrder" />

    <FontFamily x:Key="DefaultFont">Segoe UI, Lucida Sans Unicode, Verdana</FontFamily>
    <FontFamily x:Key="HeaderFont">Arial Black</FontFamily>
    <System:Double x:Key="ContentFontSize">12</System:Double>
    <System:Double x:Key="NormalFontSize">14</System:Double>
    <System:Double x:Key="HeaderFontSize">16</System:Double>
    <System:Double x:Key="BigFontSize">18</System:Double>
    <System:Double x:Key="VeryBigFontSize">24</System:Double>
    <System:Double x:Key="SmallFontSize">12</System:Double>

    <Style x:Key="dotedSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle
                        Height="{TemplateBinding Height}"
                        Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                        StrokeDashArray="1 4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="SeparatorStyle"
        BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
        TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="5,0" />
    </Style>

    <Style BasedOn="{StaticResource dotedSeparator}" TargetType="{x:Type Separator}" />


    <Style x:Key="BaseTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontSize" Value="{local_extensions:SettingBinding Path=FontSize}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                        BlurRadius="1"
                        Direction="330"
                        Opacity="0"
                        ShadowDepth="1"
                        Color="Black" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation
                            AutoReverse="True"
                            RepeatBehavior="1x"
                            Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                            From="Transparent"
                            To="Orange"
                            Duration="0:0:1.5">
                            <ColorAnimation.EasingFunction>
                                <ExponentialEase EasingMode="EaseInOut" />
                            </ColorAnimation.EasingFunction>
                        </ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetProperty="Effect.Opacity" To="0.5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetProperty="Effect.Opacity" From="0.5" To="0"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0,0" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <!--  Setter Property="TextAlignment" Value="Center" /  -->
    </Style>

    <DataTemplate x:Key="ButtonContentTemplate">
        <TextBlock
            Margin="10,1"
            VerticalAlignment="Center"
            LineHeight="15"
            LineStackingStrategy="BlockLineHeight"
            SnapsToDevicePixels="True"
            Text="{Binding}"
            TextAlignment="Center"
            TextWrapping="Wrap" />
    </DataTemplate>
    <!-- Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
         <Setter Property="ContentTemplate" Value="{StaticResource ButtonContentTemplate}" />
         </Style-->

    <Style x:Key="defaultButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="ContentTemplate" Value="{x:Null}" />
    </Style>

    <Style x:Key="horizontalListBoxItem" TargetType="ListBoxItem">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border
                        Name="Border"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="3">
                        <TextBlock
                            Margin="0"
                            Padding="0"
                            VerticalAlignment="Center"
                            Text="{Binding}"
                            TextAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            <!--  Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold" /  -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border
                        Name="Border"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="3">
                        <TextBlock
                            Margin="0"
                            Padding="{TemplateBinding Padding}"
                            VerticalAlignment="Center"
                            LineHeight="12"
                            LineStackingStrategy="BlockLineHeight"
                            Text="{TemplateBinding Content}"
                            TextAlignment="Center"
                            TextWrapping="WrapWithOverflow" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type DatePicker}}" TargetType="{x:Type DatePicker}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <ControlTemplate x:Key="BaseToolTipControlTemplate" TargetType="{x:Type ToolTip}">
        <Grid
            Width="{TemplateBinding FrameworkElement.Width}"
            Height="{TemplateBinding FrameworkElement.Height}"
            Margin="8"
            Background="#00FFFFFF">
            <Rectangle
                Height="{TemplateBinding FrameworkElement.Height}"
                Fill="#FFFFFFFF"
                RadiusX="5"
                RadiusY="5">
                <Rectangle.BitmapEffect>
                    <DropShadowBitmapEffect ShadowDepth="2" />
                </Rectangle.BitmapEffect>
            </Rectangle>
            <ContentPresenter
                Margin="4"
                HorizontalAlignment="Center"
                VerticalAlignment="Center" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="baseToolTipStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Control.FontSize" Value="{local_extensions:SettingBinding FontSize, 13.0}" />
        <Setter Property="UIElement.Opacity" Value=".95" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="100" />
        <Setter Property="ToolTipService.ShowDuration" Value="3000" />
        <Setter Property="Control.Template" Value="{StaticResource BaseToolTipControlTemplate}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

    <Style
        x:Key="{x:Type ToolTip}"
        BasedOn="{StaticResource baseToolTipStyle}"
        TargetType="{x:Type ToolTip}" />

    <ObjectDataProvider
        x:Key="TableViewKindsList"
        MethodName="GetValues"
        ObjectType="{x:Type System:Enum}">
        <ObjectDataProvider.MethodParameters>
            <x:Type TypeName="model:TableViewKinds" />
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <CompositeCollection x:Key="TableViewKindSelectMenu">
        <CollectionContainer Collection="{Binding Source={StaticResource TableViewKindsList}}" />
        <Separator />
        <MenuItem Command="{Binding SetupTableViewKinds}" Header="Настройка вариантов отображения" />
        <MenuItem Command="{Binding SaveCurrentTableViewKindAsNew}" Header="Сохранить текущий вид" />
    </CompositeCollection>

    <MenuItem
        x:Key="SelectViewKindMenu"
        x:Shared="false"
        Header="{Binding SelectedViewKind, Converter={converters:EnumBindingConverter}}"
        ItemsSource="{Binding Source={StaticResource TableViewKindSelectMenu}}"
        Style="{StaticResource baseMenuItemStyle}">
        <MenuItem.ItemContainerStyle>
            <Style BasedOn="{StaticResource baseMenuItemStyle}" TargetType="MenuItem">
                <Setter Property="Header" Value="{Binding Converter={converters:EnumBindingConverter}}" />
                <Setter Property="Command" Value="{Binding Path=DataContext.CommandChangeViewKind, RelativeSource={RelativeSource AncestorType=UserControl}}" />
                <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
        </MenuItem.ItemContainerStyle>
    </MenuItem>

    <Style BasedOn="{StaticResource {x:Type RichTextBox}}" TargetType="{x:Type RichTextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
    </Style>

    <HierarchicalDataTemplate
        x:Key="HierarchicalMenuTemplate"
        DataType="{x:Type model:HierarchicalItem}"
        ItemsSource="{Binding Items}">
        <MenuItem
            x:Name="menuitem"
            Margin="0"
            Padding="0"
            Background="LightBlue"
            Command="{Binding Command}"
            CommandParameter="{Binding CommandParameter}"
            Header="{Binding Name, Converter={StaticResource TextSpaceConverter}}"
            IsCheckable="{Binding IsCheckable}"
            ItemContainerStyle="{StaticResource baseMenuItemStyle}"
            Tag="{Binding Tag}" />
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding CommandParameter}" Value="{x:Null}">
                <Setter TargetName="menuitem" Property="CommandParameter" Value="{Binding}" />
            </DataTrigger>
            <!-- DataTrigger Binding="{Binding HasTemplate}" Value="true">
                 <Setter TargetName="menuitem" Property="Template" Value="{Binding Template}" />
                 </DataTrigger>
                 <DataTrigger Binding="{Binding HasDataContext}" Value="true">
                 <Setter TargetName="menuitem" Property="DataContext" Value="{Binding DataContext}" />
                 </DataTrigger-->
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>

    <Style TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border
                        Margin="4,2,4,0"
                        BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                        BorderThickness="1"
                        CornerRadius="5 5 0 0"
                        SnapsToDevicePixels="True">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Offset="0.1" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" />
                                <GradientStop Offset="0.3" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}" />
                                <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}" />
                                <GradientStop Offset="0.7" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}" />
                                <GradientStop Offset="0.9" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <local_controls:GlowEffectTextBlock
                            Margin="5,2"
                            FontWeight="Bold"
                            Text="{TemplateBinding Content}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!--
                    This template ensures that content of a HeaderedContentControl
                    fills the available vertical space.
                -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            DockPanel.Dock="Top" />
                        <Border
                            Margin="4,0,4,4"
                            Padding="4"
                            Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                            BorderThickness="1,0,1,1"
                            CornerRadius="0 0 5 5">
                            <ContentPresenter ContentSource="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock Text="{Binding Path=Content, RelativeSource={RelativeSource AncestorType=Button}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="deleteButtonStyle"
        BasedOn="{StaticResource TextButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="Удалить из списка" />
        <Setter Property="Command" Value="{Binding DataContext.CommandRemoveField, RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                    <Binding />
                    <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="Parent.DataContext" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border>
                        <TextBlock
                            FontFamily="Webdings"
                            Foreground="DarkRed"
                            Text="r" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderedContentControlStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border
                        x:Name="border"
                        Margin="10,2,10,-12"
                        HorizontalAlignment="Center"
                        Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                        BorderThickness="1"
                        CornerRadius="5">
                        <TextBlock
                            x:Name="txt"
                            Margin="5,2"
                            Text="{TemplateBinding Content}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter
                            x:Name="header"
                            Panel.ZIndex="1"
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            DockPanel.Dock="Top" />
                        <Border
                            x:Name="border"
                            Margin="0,0,0,0"
                            Padding="2,15,2,2"
                            Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                            BorderThickness="1"
                            CornerRadius="5">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                ContentSource="Content"
                                ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterStyle1" TargetType="{x:Type GridSplitter}">
        <!--  Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" /  -->
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                    <GradientStop Offset="0" Color="#A0A0A0" />
                    <GradientStop Offset="0.15" Color="#E5E5E5" />
                    <GradientStop Offset="0.8" Color="#ECECEC" />
                    <GradientStop Offset="1" Color="#E5E5E5" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="PreviewStyle" Value="{DynamicResource GridSplitterPreviewStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0">
                        <Canvas
                            Width="50"
                            Height="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RenderOptions.EdgeMode="Aliased"
                            UseLayoutRounding="True">
                            <Line
                                Stroke="White"
                                StrokeThickness="1"
                                X1="0"
                                X2="50"
                                Y1="0"
                                Y2="0" />
                            <Line
                                Stroke="#A0A0A0"
                                StrokeThickness="1"
                                X1="0"
                                X2="50"
                                Y1="1"
                                Y2="1" />
                            <Line
                                Stroke="White"
                                StrokeThickness="1"
                                X1="0"
                                X2="50"
                                Y1="4"
                                Y2="4" />
                            <Line
                                Stroke="#A0A0A0"
                                StrokeThickness="1"
                                X1="0"
                                X2="50"
                                Y1="5"
                                Y2="5" />
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>