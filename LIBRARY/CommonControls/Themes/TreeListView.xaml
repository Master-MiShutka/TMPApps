<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:TMP.Wpf.CommonControls.Converters"
                    xmlns:treelistview="clr-namespace:TMP.Wpf.CommonControls.Controls.TreeListView">

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="19" />
        <Setter Property="Height" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="19"
                            Height="13"
                            Background="#00FFFFFF">
                        <Border Width="9"
                                Height="9"
                                BorderBrush="#FF7898B5"
                                BorderThickness="1,1,1,1"
                                CornerRadius="1,1,1,1"
                                SnapsToDevicePixels="True">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0.2" Color="#FFFFFFFF" />
                                        <GradientStop Offset="1" Color="#FFC0B7A6" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path Name="ExpandPath"
                                  Margin="1,1,1,1"
                                  Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
                                  Fill="#FF000000" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Path.Data">
                                <Setter.Value>
                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters:LevelToIndentConverter x:Key="LevelToIndentConverter" />
    <converters:CanExpandConverter x:Key="CanExpandConverter" />

    <Style TargetType="{x:Type treelistview:RowExpander}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treelistview:RowExpander}">
                    <ToggleButton x:Name="Expander"
                                  Margin="{Binding Node.Level,
                                                   Converter={StaticResource LevelToIndentConverter},
                                                   RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}"
                                  ClickMode="Press"
                                  IsChecked="{Binding Node.IsExpanded,
                                                      Mode=TwoWay,
                                                      RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}"
                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                  Visibility="{Binding Node.IsExpandable,
                                                       Converter={StaticResource CanExpandConverter},
                                                       RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type treelistview:TreeListView}">
        <Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="BorderThickness" Value="0 1 0 0" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="AlternationCount" Value="2" />

        <!--  Things taken from the original template.  -->
        <Setter Property="SnapsToDevicePixels" Value="true" />

        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treelistview:TreeListView}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextWrapping" Value="Wrap" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource TMPGridViewScrollViewerStyle}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource GrayBrush9}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type treelistview:TreeListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource GrayBrush1}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treelistview:TreeListViewItem}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <GridViewRowPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}, Path=Foreground}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListView}}}" Value="False">
                                                <Setter Property="Foreground" Value="{DynamicResource GrayNormalBrush}" />
                                            </DataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListView}}}" Value="False" />
                                                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type treelistview:TreeListViewItem}}}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </GridViewRowPresenter.Resources>
                            </GridViewRowPresenter>
                            <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="#FF143c65" />
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentColorBrush3}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentColorBrush2}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="#FF143c65" />
                            <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush7}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>