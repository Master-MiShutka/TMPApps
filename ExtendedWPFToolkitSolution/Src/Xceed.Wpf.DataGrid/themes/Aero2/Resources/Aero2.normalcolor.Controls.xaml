<!--
    ***********************************************************************************
    
    Extended WPF Toolkit
    
    Copyright (C) 2007-2013 Xceed Software Inc.
    
    This program is provided to you under the terms of the Microsoft Public
    License (Ms-PL) as published at http://wpftoolkit.codeplex.com/license
    
    For more features, controls, and fast professional support,
    pick up the Plus Edition at http://xceed.com/wpf_toolkit
    
    Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids
    
    **********************************************************************************
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
    xmlns:s="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>

        <!--  Include the view independant, color-scheme independant, theme resources  -->
        <markup:DataGridThemeResourceDictionary Source="Aero2.normalcolor.Resources.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#CCC" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">

        <!--  This must be named as PART_ContentHost  -->
        <Border
            x:Name="PART_ContentHost"
            Background="{TemplateBinding Background}"
            Focusable="False" />
    </ControlTemplate>

    <!--  Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs  -->
    <SolidColorBrush x:Key="aero2NormalColorGlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="glyphDefaultBordeBrush" Color="Black" />

    <SolidColorBrush x:Key="scrollbarGlyphBordeBrush" Color="White" />

    <LinearGradientBrush x:Key="checkBoxBorderDefaultBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="#3F1686D8" />
        <GradientStop Offset="0.53" Color="#001686D8" />
        <GradientStop Offset="0.987" Color="#3F1686D8" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="checkBoxPathDefaultBackgroundBrush" StartPoint="0,0" EndPoint="0.6,0.75">
        <GradientStop Color="#7F1686D8" />
        <GradientStop Offset="1" Color="#001686D8" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="checkBoxPathMouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0.6,0.75">
        <GradientStop Color="White" />
        <GradientStop Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="checkBoxBorderPressedBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#BF1686D8" />
        <GradientStop Offset="0.53" />
        <GradientStop Offset="0.987" Color="#BF1686D8" />
        <GradientStop Offset="0.252" Color="#7F56A7E2" />
        <GradientStop Offset="0.756" Color="#7F56A7E2" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="buttonOutsideBorderDefaultBorderBrush" Color="#FFAAAAAA" />

    <LinearGradientBrush x:Key="buttonOutsideBorderDefaultBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.51" Color="#FF0280E0" />
        <GradientStop Offset="0.5" Color="#FF04A2F7" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonOutsideBorderDefaultVerticalBackgroundBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Offset="0.51" Color="#FF0280E0" />
        <GradientStop Offset="0.5" Color="#FF04A2F7" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="buttonInsideBorderIsMouseOverBorderBrush" Color="White" />

    <SolidColorBrush x:Key="buttonInsideBorderIsPressedBorderBrush" Color="White" />

    <LinearGradientBrush x:Key="buttonOutsideBorderIsPressedBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.5" Color="#FF015EC8" />
        <GradientStop Offset="0.49" Color="#FF0283E2" />
        <GradientStop Offset="1" Color="#FF015EC8" />
        <GradientStop Offset="0.003" Color="#FF0283E2" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonOutsideBorderIsPressedVerticalBackgroundBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Offset="0.5" Color="#FF015EC8" />
        <GradientStop Offset="0.49" Color="#FF0283E2" />
        <GradientStop Offset="1" Color="#FF015EC8" />
        <GradientStop Offset="0.003" Color="#FF0283E2" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonOutsideBorderIsMouseOverBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.49" Color="#FF31B7FF" />
        <GradientStop Offset="0.5" Color="#FF04A2F7" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonOutsideBorderIsMouseOverVerticalBackgroundBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Offset="0.49" Color="#FF31B7FF" />
        <GradientStop Offset="0.5" Color="#FF04A2F7" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="buttonOutsideBorderDisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="buttonOutsideBorderDisabledBackgroundBrush" Color="#EEE" />

    <!--  Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control  -->
    <SolidColorBrush x:Key="windowDefaultBackgroundBrush" Color="#FFFFFFFF" />

    <SolidColorBrush x:Key="repeatButtonBorderDefaultBackgrounBrush" Color="Transparent" />

    <DataTemplate x:Key="leafGlyph">
        <Viewbox RenderTransformOrigin="0.5,0.5">
            <Viewbox.LayoutTransform>
                <RotateTransform Angle="133" />
            </Viewbox.LayoutTransform>
            <Grid Width="32.737" Height="23.022">
                <Path
                    Width="27.518"
                    Margin="0,0,1,10.962"
                    HorizontalAlignment="Right"
                    Data="F1M359.521,63.197C359.521,63.197,365.377,73.922,387.039,72.272L387.039,72.272C382.633,66.602,375.129,60.384,367.609,60.385L367.609,60.385C364.865,60.385,362.119,61.213,359.521,63.197"
                    Stretch="Fill">
                    <Path.Fill>
                        <LinearGradientBrush StartPoint="0.041,0.212" EndPoint="0.954,0.925">
                            <GradientStop Offset="0" Color="#3FA0FF00" />
                            <GradientStop Offset="0.504" Color="#FF35D16A" />
                            <GradientStop Offset="0.991" Color="#FF269B4E" />
                        </LinearGradientBrush>
                    </Path.Fill>
                </Path>
                <Path
                    Width="16.811"
                    Height="10.022"
                    Margin="0,13,0,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Data="F1M371.038,82.379C371.038,82.379,387.183,87.576,387.849,73.688L387.849,73.688C386.354,73.428,385.138,73.309,384.133,73.309L384.133,73.309C377.22,73.309,380.281,78.91,371.038,82.379"
                    Stretch="Fill">
                    <Path.Fill>
                        <LinearGradientBrush StartPoint="0.014,1.019" EndPoint="0.944,0.199">
                            <GradientStop Offset="0" Color="#3FA0FF00" />
                            <GradientStop Offset="0.496" Color="#FF35D16A" />
                            <GradientStop Offset="0.991" Color="#FF269B4E" />
                        </LinearGradientBrush>
                    </Path.Fill>
                </Path>
                <Path
                    Width="24.737"
                    Height="10.306"
                    Margin="0,12,8,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Data="F1M354.892,78.722C364.253,87.011,375.045,79.608,379.629,73.713L379.629,73.713C376.149,72.569,373.047,72.116,370.317,72.116L370.317,72.116C359.895,72.115,354.892,78.722,354.892,78.722"
                    Stretch="Fill">
                    <Path.Fill>
                        <LinearGradientBrush StartPoint="0.046,0.686" EndPoint="0.93,0.231">
                            <GradientStop Offset="0" Color="#3FA0FF00" />
                            <GradientStop Offset="0.526" Color="#FF35D16A" />
                            <GradientStop Offset="0.996" Color="#FF269B4E" />
                        </LinearGradientBrush>
                    </Path.Fill>
                </Path>
            </Grid>
        </Viewbox>
    </DataTemplate>

    <!--  Radio Button  -->
    <Style TargetType="{x:Type RadioButton}">

        <Setter Property="SnapsToDevicePixels" Value="true" />

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!--  BulletDecorator is used to provide baseline alignment between the checkmark and the Content  -->
                    <BulletDecorator Background="Transparent">

                        <BulletDecorator.Bullet>

                            <Grid Width="13" Height="13">

                                <Ellipse
                                    x:Name="EllipseOutside"
                                    Fill="{StaticResource checkBoxOutsideBorderDefaultBackgroundBrush}"
                                    Stroke="{StaticResource checkBoxOutsideBorderDefaultBorderBrush}"
                                    StrokeThickness="1" />

                                <Ellipse
                                    x:Name="EllipseInside"
                                    Width="Auto"
                                    Margin="2,2,2,2"
                                    HorizontalAlignment="Stretch"
                                    Fill="{StaticResource checkBoxInsideBorderDefaultBackgroundBrush}"
                                    Stroke="{StaticResource checkBoxInsideBorderDefaultBorderBrush}"
                                    StrokeThickness="1" />

                                <Ellipse
                                    x:Name="CheckMark"
                                    Margin="4"
                                    Fill="{StaticResource glyphDefaultBordeBrush}" />
                            </Grid>

                        </BulletDecorator.Bullet>

                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />

                    </BulletDecorator>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="false">

                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="EllipseOutside" Property="Stroke" Value="{StaticResource checkBoxOutsideBorderIsMouseOverBorderBrush}" />

                            <Setter TargetName="EllipseOutside" Property="Fill" Value="{StaticResource checkBoxOutsideBorderIsMouseOverBackgroundBrush}" />

                            <Setter TargetName="EllipseInside" Property="Stroke" Value="{StaticResource checkBoxInsideBorderIsMouseOverBorderBrush}" />

                            <Setter TargetName="EllipseInside" Property="Fill" Value="{StaticResource checkBoxInsideBorderIsMouseOverBackgroundBrush}" />

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">

                            <Setter TargetName="EllipseOutside" Property="Fill" Value="{StaticResource checkBoxOutsideBorderIsPressedBackgroundBrush}" />

                            <Setter TargetName="EllipseOutside" Property="Stroke" Value="{StaticResource checkBoxOutsideBorderIsPressedBorderBrush}" />

                            <Setter TargetName="EllipseInside" Property="Fill" Value="{StaticResource checkBoxInsideBorderIsPressedBackgroundBrush}" />

                            <Setter TargetName="EllipseInside" Property="Stroke" Value="{StaticResource checkBoxInsideBorderIsPressedBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="#80000000" />

                            <Setter TargetName="EllipseInside" Property="Stroke" Value="{StaticResource checkBoxInsideBorderIsEnabledBorderBrush}" />

                            <Setter TargetName="EllipseInside" Property="Fill" Value="{StaticResource checkBoxInsideBorderIsEnabledBackgroundBrush}" />

                            <Setter TargetName="EllipseOutside" Property="Fill" Value="{StaticResource checkBoxOutsideBorderIsEnabledBackgroundBrush}" />

                            <Setter TargetName="EllipseOutside" Property="Stroke" Value="{StaticResource checkBoxOutsideBorderIsEnabledBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!--  checkBoxWindows8  -->

    <Style TargetType="{x:Type CheckBox}">

        <Setter Property="SnapsToDevicePixels" Value="true" />

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="13" />
                            </Grid.ColumnDefinitions>
                            <Border
                                Name="Border"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                Margin="1" />

                            <Grid
                                Width="13"
                                Height="13"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">

                                <Border
                                    Margin="1"
                                    Background="#FFD1ECFF"
                                    CornerRadius="1" />

                                <Border
                                    x:Name="insideBorder"
                                    Margin="1"
                                    Background="{StaticResource checkBoxBorderDefaultBackgroundBrush}"
                                    BorderBrush="White"
                                    BorderThickness="1"
                                    CornerRadius="1" />

                                <Path
                                    x:Name="CheckBoxPath"
                                    Margin="0.976,0.985,0.978,1.024"
                                    Data="M0.89013951,21.53754 C0.89013951,22.13754 0.92765297,3.68705 1.0012841,2.92993 1.2523327,0.34849 -3.6053779,-0.02693 23.25,-0.01368 46.88465,-0.00203 353.22295,0.01789 368.74551,-0.01368 399.32761,-0.0759 393.45345,-0.35295 392.87051,4.81326 366.3499,4.83686 234.23724,4.3665 163.26526,7.74613 92.293281,11.12575 15.63336,16.94202 12.222291,22.88633 10.979058,22.89814 7.5156977,23.01335 3.751176,22.50587 -0.013345688,21.99839 0.89013951,21.32853 0.89013951,21.53754 z"
                                    Fill="{StaticResource checkBoxPathDefaultBackgroundBrush}"
                                    Stretch="Fill"
                                    Stroke="{x:Null}" />

                                <Border
                                    BorderBrush="Black"
                                    BorderThickness="1"
                                    CornerRadius="2" />
                            </Grid>

                            <Border
                                Name="Check"
                                Width="13"
                                Height="13"
                                Margin="6,0,6,0"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="1">
                                <Path
                                    Name="CheckMark"
                                    Width="10"
                                    Height="11"
                                    Data="M 9.58416748046875,0 C9.58416748046875,0 10,0.6159515380859375 10,0.6159515380859375 8.7657470703125,1.540008544921875 8.419189453125,2.9010162353515625 6.96038818359375,4.698974609375 5.5015869140625,6.4969329833984375 4.602294921875,9.774444580078125 4.602294921875,9.774444580078125 4.602294921875,9.774444580078125 3.9029541015625,10.2296142578125 3.9029541015625,10.2296142578125 3.419921875,10.55328369140625 3.01983642578125,10.810089111328125 2.70257568359375,11 2.581787109375,10.676483154296875 2.114166259765625,9.48345947265625 1.46875,8.5 0.8125,7.5 0.4044189453125,6.9029998779296875 0,6.7393035888671875 0.667236328125,5.9750518798828125 1.8385009765625,5.592926025390625 1.8385009765625,5.592926025390625 1.8385009765625,5.592926025390625 3.555908203125,7.8286285400390625 3.555908203125,7.8286285400390625 4.3878173828125,6.349609375 4.5516357421875,4.8782501220703125 6.04742431640625,3.4145355224609375 7.543212890625,1.9508209228515625 8.055419921875,0.8126373291015625 9.58416748046875,0 z"
                                    Fill="{StaticResource glyphDefaultBordeBrush}"
                                    Opacity="1"
                                    SnapsToDevicePixels="False"
                                    Stretch="Fill"
                                    Visibility="Hidden" />
                            </Border>
                            <ContentPresenter
                                Name="HeaderHost"
                                Grid.Column="1"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Content}"
                                ContentSource="Header"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="CheckBoxPath" Property="Fill" Value="{StaticResource checkBoxPathMouseOverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="CheckBoxPath" Property="Fill" Value="{StaticResource checkBoxPathDefaultBackgroundBrush}" />
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource checkBoxBorderPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#DADADA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>

        </Setter>

    </Style>

    <!--
        Expander
        This uses the Simpler ExpanderToggleButton. It sets Visibility on the ContentPresenter to expand
        Limitations : The Simple Expander only expands down
    -->

    <!--  Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow  -->
    <ControlTemplate x:Key="toggleButtonControllAero2NormalColor" TargetType="{x:Type ToggleButton}">

        <Grid>
            <Border Background="Transparent" />

            <Border
                MinWidth="16"
                MinHeight="16"
                Margin="0,0,4,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                BorderBrush="Black"
                BorderThickness="1,0,0,1"
                CornerRadius="4"
                IsHitTestVisible="False"
                SnapsToDevicePixels="True">
                <Border
                    x:Name="toggleDecorator"
                    BorderBrush="{StaticResource basicWhiteBorderBrush}"
                    BorderThickness="1,0,0,1"
                    CornerRadius="3"
                    SnapsToDevicePixels="True">
                    <Path
                        Margin="0,2,2,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 4 4 L 8 0 Z"
                        Fill="{StaticResource aero2NormalColorGlyphBrush}"
                        IsHitTestVisible="False" />
                </Border>
            </Border>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="true">

                <Setter TargetName="toggleDecorator" Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0" />
                            <GradientStop Offset="1" Color="White" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>

            </Trigger>

            <Trigger Property="IsChecked" Value="true">

                <Setter TargetName="toggleDecorator" Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="1" />
                            <GradientStop Offset="0" Color="#FF04A2F7" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>

            </Trigger>

            <Trigger Property="IsEnabled" Value="False">

                <Setter TargetName="toggleDecorator" Property="Opacity" Value="0.3" />

            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Expander}">

                    <Grid>

                        <Grid.RowDefinitions>

                            <RowDefinition Height="Auto" />

                            <RowDefinition x:Name="ContentRow" Height="*" />

                        </Grid.RowDefinitions>

                        <Border
                            x:Name="Border"
                            Grid.Row="0"
                            Background="{StaticResource windowDefaultBackgroundBrush}"
                            BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0,0,0,0">

                            <Grid>

                                <Grid.ColumnDefinitions>

                                    <ColumnDefinition Width="20" />

                                    <ColumnDefinition Width="*" />

                                </Grid.ColumnDefinitions>

                                <ToggleButton
                                    Background="{StaticResource NormalBrush}"
                                    IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    OverridesDefaultStyle="True"
                                    Template="{StaticResource toggleButtonControllAero2NormalColor}" />

                                <ContentPresenter
                                    Grid.Column="1"
                                    Margin="4"
                                    ContentSource="Header"
                                    RecognizesAccessKey="True" />

                            </Grid>

                        </Border>

                        <Border
                            x:Name="ExpandSite"
                            Grid.Row="1"
                            Background="{StaticResource windowDefaultBackgroundBrush}"
                            BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}"
                            BorderThickness="1,0,1,1"
                            CornerRadius="0,0,0,0"
                            Visibility="Collapsed">

                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="false" />

                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsExpanded" Value="True">

                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!--  ScrollBar  This makes use of Thumb, RepeatButton and ScrollRepeatButton  -->

    <!--  Repeat Button - This is used by ScrollBar for the up and down buttons  -->
    <Style x:Key="increaseDecreaseRepeatButtonAero2NormalColor" TargetType="{x:Type RepeatButton}">

        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="Focusable" Value="False" />

        <Setter Property="IsTabStop" Value="False" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Grid>

                        <Border
                            x:Name="Border"
                            Background="{StaticResource buttonOutsideBorderDefaultVerticalBackgroundBrush}"
                            BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="3" />

                        <ContentPresenter
                            x:Name="ContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderIsMouseOverVerticalBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderIsPressedVerticalBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style
        x:Key="increaseDecreaseHorizontalRepeatButtonAero2NormalColor"
        BasedOn="{StaticResource increaseDecreaseRepeatButtonAero2NormalColor}"
        TargetType="{x:Type RepeatButton}">

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Grid>

                        <Border
                            x:Name="Border"
                            Background="{StaticResource buttonOutsideBorderDefaultBackgroundBrush}"
                            BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="3" />

                        <ContentPresenter
                            x:Name="ContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderIsMouseOverBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderIsPressedBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!--  Thumb - The Thumb is the draggable part of the Scrollbar  -->
    <Style x:Key="thumbAero2NormalColor" TargetType="{x:Type Thumb}">

        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="IsTabStop" Value="False" />

        <Setter Property="Focusable" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle
                            x:Name="Rectangle"
                            Width="Auto"
                            Height="Auto"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="{StaticResource buttonOutsideBorderDefaultVerticalBackgroundBrush}"
                            RadiusX="3"
                            RadiusY="3"
                            Stroke="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderIsMouseOverVerticalBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsDragging" Value="True">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderIsPressedVerticalBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style
        x:Key="horizontalthumbAero2NormalColor"
        BasedOn="{StaticResource thumbAero2NormalColor}"
        TargetType="{x:Type Thumb}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle
                            x:Name="Rectangle"
                            Width="Auto"
                            Height="Auto"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="{StaticResource buttonOutsideBorderDefaultBackgroundBrush}"
                            RadiusX="3"
                            RadiusY="3"
                            Stroke="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderIsMouseOverBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                        </Trigger>

                        <Trigger Property="IsDragging" Value="True">

                            <Setter TargetName="Rectangle" Property="Fill" Value="{StaticResource buttonOutsideBorderIsPressedBackgroundBrush}" />

                            <Setter TargetName="Rectangle" Property="Stroke" Value="{StaticResource buttonOutsideBorderDefaultBorderBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!--  ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar  -->
    <Style x:Key="repeatButtonPageUpDownAero2NormalColor" TargetType="{x:Type RepeatButton}">

        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="Background" Value="Transparent" />

        <Setter Property="BorderBrush" Value="Transparent" />

        <Setter Property="IsTabStop" Value="false" />

        <Setter Property="Focusable" Value="false" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <Grid>
                        <Rectangle Fill="{StaticResource repeatButtonBorderDefaultBackgrounBrush}" />
                    </Grid>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style TargetType="{x:Type ScrollBar}">

        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />

        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />

        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />

        <Setter Property="Background" Value="#FFD1ECFF" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}">

                        <Grid.RowDefinitions>

                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />

                            <RowDefinition Height="0.00001*" />

                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />

                        </Grid.RowDefinitions>

                        <Border
                            Grid.RowSpan="3"
                            BorderBrush="#FFAAAAAA"
                            BorderThickness="1" />

                        <RepeatButton
                            x:Name="DecreaseRepeat"
                            Command="ScrollBar.LineUpCommand"
                            Style="{StaticResource increaseDecreaseRepeatButtonAero2NormalColor}">
                            <Grid>

                                <Path
                                    x:Name="DecreaseArrow"
                                    Data="M 0 4 L 8 4 L 4 0 Z"
                                    Fill="{StaticResource scrollbarGlyphBordeBrush}"
                                    Stroke="{x:Null}"
                                    StrokeThickness="1" />

                            </Grid>

                        </RepeatButton>

                        <!--  Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it  -->

                        <Track
                            x:Name="PART_Track"
                            Grid.Row="1"
                            IsDirectionReversed="true">

                            <Track.Thumb>

                                <Thumb Style="{StaticResource thumbAero2NormalColor}" />

                            </Track.Thumb>

                            <Track.IncreaseRepeatButton>

                                <RepeatButton
                                    x:Name="PageUp"
                                    Command="ScrollBar.PageDownCommand"
                                    Style="{StaticResource repeatButtonPageUpDownAero2NormalColor}" />

                            </Track.IncreaseRepeatButton>

                            <Track.DecreaseRepeatButton>

                                <RepeatButton
                                    x:Name="PageDown"
                                    Command="ScrollBar.PageUpCommand"
                                    Style="{StaticResource repeatButtonPageUpDownAero2NormalColor}" />

                            </Track.DecreaseRepeatButton>

                        </Track>

                        <RepeatButton
                            x:Name="IncreaseRepeat"
                            Grid.Row="2"
                            Command="ScrollBar.LineDownCommand"
                            Style="{StaticResource increaseDecreaseRepeatButtonAero2NormalColor}">

                            <Grid>

                                <Path
                                    x:Name="IncreaseArrow"
                                    Data="M 0 0 L 4 4 L 8 0 Z"
                                    Fill="{StaticResource scrollbarGlyphBordeBrush}"
                                    Stroke="{x:Null}"
                                    StrokeThickness="1" />

                            </Grid>

                        </RepeatButton>

                    </Grid>
                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />

                <Setter Property="MinWidth" Value="0" />

                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />

                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="GridRoot" Background="{TemplateBinding Background}">

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>

                                <Border
                                    Grid.ColumnSpan="3"
                                    BorderBrush="#FFAAAAAA"
                                    BorderThickness="1" />

                                <RepeatButton
                                    x:Name="DecreaseRepeat"
                                    Command="ScrollBar.LineLeftCommand"
                                    Style="{StaticResource increaseDecreaseHorizontalRepeatButtonAero2NormalColor}">
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <RotateTransform Angle="-90" />
                                        </Grid.LayoutTransform>

                                        <Path
                                            x:Name="DecreaseArrow"
                                            Data="M 0 4 L 8 4 L 4 0 Z"
                                            Fill="{StaticResource scrollbarGlyphBordeBrush}"
                                            Stroke="{x:Null}"
                                            StrokeThickness="1" />

                                    </Grid>

                                </RepeatButton>

                                <!--  Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it  -->

                                <Track x:Name="PART_Track" Grid.Column="1">

                                    <Track.Thumb>

                                        <Thumb Style="{StaticResource horizontalthumbAero2NormalColor}" />

                                    </Track.Thumb>

                                    <Track.IncreaseRepeatButton>

                                        <RepeatButton
                                            x:Name="PageRight"
                                            Command="ScrollBar.PageRightCommand"
                                            Style="{StaticResource repeatButtonPageUpDownAero2NormalColor}" />

                                    </Track.IncreaseRepeatButton>

                                    <Track.DecreaseRepeatButton>

                                        <RepeatButton
                                            x:Name="PageLeft"
                                            Command="ScrollBar.PageLeftCommand"
                                            Style="{StaticResource repeatButtonPageUpDownAero2NormalColor}" />

                                    </Track.DecreaseRepeatButton>

                                </Track>

                                <RepeatButton
                                    x:Name="IncreaseRepeat"
                                    Grid.Column="2"
                                    Command="ScrollBar.LineRightCommand"
                                    Style="{StaticResource increaseDecreaseHorizontalRepeatButtonAero2NormalColor}">

                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <RotateTransform Angle="-90" />
                                        </Grid.LayoutTransform>

                                        <Path
                                            x:Name="IncreaseArrow"
                                            Data="M 0 0 L 4 4 L 8 0 Z"
                                            Fill="{StaticResource scrollbarGlyphBordeBrush}"
                                            Stroke="{x:Null}"
                                            StrokeThickness="1" />

                                    </Grid>

                                </RepeatButton>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--  Simple Button - This control sets brushes on each state. Note that these brushes must be listed above since they are static resources  -->
    <Style TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  We use Grid as a root because it is easy to add more elements to customize the button  -->
                    <Grid x:Name="Grid">

                        <Border
                            Background="#FFD1ECFF"
                            BorderBrush="{StaticResource basicBlackBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="3">
                            <Border
                                x:Name="insideBorder"
                                BorderBrush="{StaticResource basicWhiteBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#3F1686D8" />
                                        <GradientStop Offset="0.53" Color="#001686D8" />
                                        <GradientStop Offset="0.987" Color="#3F1686D8" />
                                    </LinearGradientBrush>
                                </Border.Background>

                                <Path
                                    x:Name="ClearFilterPath"
                                    Width="Auto"
                                    HorizontalAlignment="Stretch"
                                    Data="M0.02,0.54 C0.02,0.55 0.02,0.09 0.03,0.07 0.03,0.01 -0.09,0 0.58,0 1.17,0 8.83,0 9.22,0 9.98,0 9.84,-0.01 9.82,0.12 9.16,0.12 5.86,0.11 4.08,0.19 2.30,0.28 0.39,0.42 0.31,0.57 0.27,0.57 0.19,0.58 0.09,0.56 0,0.55 0.02,0.53 0.02,0.53 z"
                                    Stretch="Fill"
                                    Stroke="{x:Null}">
                                    <Path.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0.6,0.75">
                                            <GradientStop Color="#7F1686D8" />
                                            <GradientStop Offset="1" Color="#001686D8" />
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                </Path>
                            </Border>
                        </Border>

                        <Border
                            x:Name="mouseOverEffect"
                            Margin="1"
                            CornerRadius="3"
                            Opacity="0">
                            <Border.Background>
                                <RadialGradientBrush Center="0.5,0.7" GradientOrigin="0.5,1" RadiusX="0.6" RadiusY="0.8">
                                    <GradientStop Offset="0.3" Color="#BFFFFFFF" />
                                    <GradientStop Offset="0.7" Color="#33FFFFFF" />
                                    <GradientStop Offset="0.4" Color="#4CFFFFFF" />
                                    <GradientStop Offset="0.06" Color="White" />
                                </RadialGradientBrush>
                            </Border.Background>
                        </Border>

                        <!--  Content Presenter is where the text content etc is placed by the control  -->
                        <!--  The bindings are useful so that the control can be parameterized without editing the template  -->
                        <ContentPresenter
                            x:Name="buttonContent"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />

                    </Grid>

                    <!--  Each state sets a brush on the Border in the template  -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="mouseOverEffect" Property="Opacity" Value="1" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">

                            <Setter TargetName="insideBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#BF1686D8" />
                                        <GradientStop Offset="0.5" />
                                        <GradientStop Offset="1" Color="#BF1686D8" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="mouseOverEffect" Property="Opacity" Value="0" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True" />

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="#868686" />

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                            <Setter TargetName="insideBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#3FFFFFFF" />
                                        <GradientStop Offset="0.5" />
                                        <GradientStop Offset="1" Color="#3FFFFFFF" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="insideBorder" Property="BorderBrush" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" />

                            <Setter TargetName="ClearFilterPath" Property="Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#3FFFFFFF" />
                                        <GradientStop Offset="0.5" />
                                        <GradientStop Offset="1" Color="#3FFFFFFF" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!--
        ComboBox
        This uses the ComboBoxToggleButton to expand and collapse a Popup control
        SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item
        The Popup shows a list of items in a StackPanel
    -->

    <!--  ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup  -->
    <ControlTemplate x:Key="toggleButtonControlAero2NormalColor" TargetType="{x:Type ToggleButton}">
        <Grid>

            <Grid.ColumnDefinitions>

                <ColumnDefinition />

                <ColumnDefinition Width="Auto" />

            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="2" Background="Transparent" />

            <Border
                Grid.Column="1"
                MinWidth="16"
                MinHeight="16"
                Margin="0,0,4,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                BorderBrush="Black"
                BorderThickness="1,0,0,1"
                CornerRadius="4"
                IsHitTestVisible="False"
                SnapsToDevicePixels="True">
                <Border
                    x:Name="toggleDecorator"
                    BorderBrush="{StaticResource basicWhiteBorderBrush}"
                    BorderThickness="1,0,0,1"
                    CornerRadius="3"
                    SnapsToDevicePixels="True">
                    <Path
                        Margin="0,2,2,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 4 4 L 8 0 Z"
                        Fill="{StaticResource aero2NormalColorGlyphBrush}"
                        IsHitTestVisible="False" />
                </Border>
            </Border>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="true">

                <Setter TargetName="toggleDecorator" Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0" />
                            <GradientStop Offset="1" Color="White" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>

            </Trigger>

            <Trigger Property="IsChecked" Value="true">

                <Setter TargetName="toggleDecorator" Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="1" />
                            <GradientStop Offset="0" Color="#FF04A2F7" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>

            </Trigger>

            <Trigger Property="IsEnabled" Value="False">

                <Setter TargetName="toggleDecorator" Property="Opacity" Value="0.3" />

            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--
        ScrollViewer
        ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar
        It is used by ListBox, MenuItem, ComboBox, and TreeView
    -->
    <Style x:Key="ScrollViewerAero2NormalColor" TargetType="{x:Type ScrollViewer}">

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ScrollViewer}">

                    <Grid Background="{TemplateBinding Background}">

                        <Grid.ColumnDefinitions>

                            <ColumnDefinition Width="*" />

                            <ColumnDefinition Width="Auto" />

                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>

                            <RowDefinition Height="*" />

                            <RowDefinition Height="Auto" />

                        </Grid.RowDefinitions>

                        <ScrollContentPresenter
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />

                        <!--  The visibility of the ScrollBars is controlled by the implementation fo the control  -->
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Orientation="Vertical"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                    </Grid>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="aero2NormalColorComboBoxStyle" TargetType="{x:Type ComboBox}">

        <Setter Property="SnapsToDevicePixels" Value="true" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ComboBox}">

                    <Grid>

                        <!--  The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen  -->
                        <ToggleButton
                            x:Name="ToggleButton"
                            Grid.Column="2"
                            ClickMode="Press"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Template="{StaticResource toggleButtonControlAero2NormalColor}" />

                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="3,2,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False"
                            TextElement.Foreground="Black" />

                        <!--  The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it  -->
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            Margin="3,2,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            Focusable="True"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Style="{x:Null}"
                            Template="{StaticResource ComboBoxTextBox}"
                            Visibility="Hidden" />

                        <!--  The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton  -->
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Slide">

                            <Grid
                                x:Name="DropDown"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                SnapsToDevicePixels="True">

                                <Border
                                    x:Name="DropDownBorder"
                                    BorderBrush="{StaticResource basicBlackBorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="4">
                                    <Border
                                        BorderBrush="{StaticResource basicWhiteBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="4">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="-0.019,1.017" EndPoint="0.979,0.046">
                                                <GradientStop Offset="1" Color="#FF1686D8" />
                                                <GradientStop Offset="0.297" Color="#FF06397B" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                    </Border>
                                </Border>

                                <ScrollViewer
                                    Margin="4,6,4,6"
                                    CanContentScroll="True"
                                    HorizontalScrollBarVisibility="Auto"
                                    SnapsToDevicePixels="True"
                                    Style="{StaticResource ScrollViewerAero2NormalColor}"
                                    VerticalScrollBarVisibility="Auto">

                                    <!--  The StackPanel is used to display the children by setting IsItemsHost to be True  -->
                                    <StackPanel
                                        IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        TextElement.Foreground="White" />

                                </ScrollViewer>

                            </Grid>

                        </Popup>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--  This forces the DropDown to have a minimum size if it is empty  -->
                        <Trigger Property="HasItems" Value="false">

                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                        </Trigger>

                        <Trigger Property="IsGrouping" Value="true">

                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">

                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />

                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />

                        </Trigger>

                        <Trigger Property="IsEditable" Value="true">

                            <Setter Property="IsTabStop" Value="false" />

                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />

                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style BasedOn="{StaticResource aero2NormalColorComboBoxStyle}" TargetType="{x:Type ComboBox}" />

    <!--  Simple TextBox  -->
    <Style x:Key="textBoxAero2NormalColor" TargetType="{x:Type TextBox}">

        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />

        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="AllowDrop" Value="true" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type TextBox}">

                    <Grid>

                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{StaticResource windowDefaultBackgroundBrush}"
                            BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="0,0,0,0">

                            <!--  The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                Style="{StaticResource ScrollViewerAero2NormalColor}" />
                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />

                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}" />

                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">

        <Setter Property="Padding" Value="3,0,3,0" />

        <Setter Property="Background" Value="Transparent" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">

                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsHighlighted" Value="true">

                            <Setter TargetName="Bd" Property="Background" Value="#FF86E9F9" />

                            <Setter Property="Foreground" Value="Black" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DefaultItemContainerStyle" TargetType="{x:Type ComboBoxItem}">

        <Setter Property="Foreground" Value="White" />

        <Setter Property="Background" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="blackBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="4">
                        <Border
                            x:Name="whiteBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            CornerRadius="3">
                            <ContentPresenter />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="blackBorder" Property="BorderBrush" Value="{StaticResource basicBlackBorderBrush}" />
                            <Setter TargetName="whiteBorder" Property="BorderBrush" Value="{StaticResource basicWhiteBorderBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="aero2NormalColorRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent">
                        <ContentPresenter x:Name="glyphZone">
                            <ContentPresenter.Content>
                                <Canvas
                                    x:Name="leftArrowCanvas"
                                    Width="13"
                                    Height="11">
                                    <Path Data="M0.97,1.19 C1.97,0.00 12.08,0.00 12.96,1.19 C13.85,2.38 8.31,10.50 7.01,10.50 C5.72,10.50 0.00,2.38 0.97,1.19 z" Stroke="Black" />
                                    <Path Data="M1.91,1.80 C2.44,0.88 11.95,0.88 12.03,1.80 C12.81,2.04 7.55,9.73 7.01,9.46 C6.47,9.68 1.02,2.05 1.91,1.80 z">
                                        <Path.Fill>
                                            <RadialGradientBrush>
                                                <GradientStop Offset="1" Color="White" />
                                                <GradientStop Offset="0.4" />
                                            </RadialGradientBrush>
                                        </Path.Fill>
                                        <Path.Stroke>
                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                <GradientStop Offset="0" Color="White" />
                                                <GradientStop Offset="1" Color="White" />
                                                <GradientStop Offset="0.52" />
                                            </LinearGradientBrush>
                                        </Path.Stroke>
                                    </Path>
                                </Canvas>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        **************************
        * Style: MenuItem(ContextMenu)
        **************************
    -->

    <ControlTemplate x:Key="aero2NormalColorMenuItem" TargetType="{x:Type MenuItem}">
        <Border>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Border
                    Name="Border"
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    Margin="1" />
                <ContentPresenter
                    Name="Icon"
                    Margin="6,0,6,0"
                    VerticalAlignment="Center"
                    ContentSource="Icon" />
                <Border
                    Name="Check"
                    Width="13"
                    Height="13"
                    Margin="6,0,6,0"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    Visibility="Collapsed">
                    <Path
                        Name="CheckMark"
                        Width="10"
                        Height="11"
                        Data="M 9.58416748046875,0 C9.58416748046875,0 10,0.6159515380859375 10,0.6159515380859375 8.7657470703125,1.540008544921875 8.419189453125,2.9010162353515625 6.96038818359375,4.698974609375 5.5015869140625,6.4969329833984375 4.602294921875,9.774444580078125 4.602294921875,9.774444580078125 4.602294921875,9.774444580078125 3.9029541015625,10.2296142578125 3.9029541015625,10.2296142578125 3.419921875,10.55328369140625 3.01983642578125,10.810089111328125 2.70257568359375,11 2.581787109375,10.676483154296875 2.114166259765625,9.48345947265625 1.46875,8.5 0.8125,7.5 0.4044189453125,6.9029998779296875 0,6.7393035888671875 0.667236328125,5.9750518798828125 1.8385009765625,5.592926025390625 1.8385009765625,5.592926025390625 1.8385009765625,5.592926025390625 3.555908203125,7.8286285400390625 3.555908203125,7.8286285400390625 4.3878173828125,6.349609375 4.5516357421875,4.8782501220703125 6.04742431640625,3.4145355224609375 7.543212890625,1.9508209228515625 8.055419921875,0.8126373291015625 9.58416748046875,0 z"
                        Fill="{StaticResource scrollbarGlyphBordeBrush}"
                        Opacity="1"
                        SnapsToDevicePixels="False"
                        Stretch="Fill"
                        Visibility="Hidden" />
                </Border>
                <ContentPresenter
                    Name="HeaderHost"
                    Grid.Column="1"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="2"
                    Margin="5,2,0,2"
                    DockPanel.Dock="Right"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#DADADA" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Background" Value="#FF86E9F9" />
                <Setter TargetName="CheckMark" Property="Fill" Value="Black" />
                <Setter Property="TextElement.Foreground" Value="Black" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <!--
        **************************
        * Style: MenuItemScrollViewer (ContextMenu)
        **************************
    -->

    <Style x:Key="MenuItemScrollViewer" TargetType="{x:Type ScrollViewer}">

        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="15" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="15" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.RowSpan="3" />
                        <RepeatButton
                            x:Name="topRepeatButton"
                            Grid.Row="0"
                            Height="15"
                            ClickMode="Hover"
                            Command="ScrollBar.LineUpCommand"
                            Style="{StaticResource increaseDecreaseRepeatButtonAero2NormalColor}">
                            <Grid
                                Width="5"
                                Height="10"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">
                                <Canvas Width="9" Height="5">
                                    <Path
                                        Data="M 4.53125,0.15625 C4.53125,0.15625 9,5 9,5 9,5 0,5 0,5 0,5 4.53125,0.15625 4.53125,0.15625 z"
                                        Fill="{StaticResource glyphDefaultBordeBrush}"
                                        Opacity="1" />
                                </Canvas>

                            </Grid>
                            <RepeatButton.Visibility>
                                <MultiBinding
                                    Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                    ConverterParameter="0"
                                    FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>

                        <RepeatButton
                            x:Name="bottomRepeatButton"
                            Grid.Row="2"
                            Height="15"
                            ClickMode="Hover"
                            Command="ScrollBar.LineDownCommand"
                            Style="{StaticResource increaseDecreaseRepeatButtonAero2NormalColor}">
                            <RepeatButton.Visibility>
                                <MultiBinding
                                    Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                    ConverterParameter="100"
                                    FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Grid
                                Width="5"
                                Height="10"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="0.5,0.5">
                                <Canvas Width="9" Height="5">
                                    <Path
                                        Data="M 4.53125,0.15625 C4.53125,0.15625 9,5 9,5 9,5 0,5 0,5 0,5 4.53125,0.15625 4.53125,0.15625 z"
                                        Fill="{StaticResource glyphDefaultBordeBrush}"
                                        Opacity="1" />
                                </Canvas>
                                <Grid.RenderTransform>
                                    <RotateTransform Angle="180" />
                                </Grid.RenderTransform>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
