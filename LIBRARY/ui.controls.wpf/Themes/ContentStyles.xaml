<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:TMP.UI.Controls.WPF.Converters"
    xmlns:helpers="clr-namespace:TMP.UI.Controls.WPF.Helpers"
    xmlns:local="clr-namespace:TMP.UI.Controls.WPF"
    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ui.controls.wpf;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/ui.controls.wpf;component/Themes/NoDataTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type local:BusyControl}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Panel.ZIndex" Value="1000" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="TextBlock.FontSize" Value="{DynamicResource HeaderFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyControl}">
                    <Grid>
                        <Rectangle Fill="{Binding BackgroundFillBrush, RelativeSource={RelativeSource AncestorType={x:Type local:BusyControl}}}" Opacity="{Binding BackgroundFillOpacity, RelativeSource={RelativeSource AncestorType={x:Type local:BusyControl}}}" />
                        <Border
                            Margin="50"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                            CornerRadius="5">
                            <StackPanel Margin="10" Orientation="Vertical">
                                <TextBlock Text="Пожалуйста, подождите ..." TextAlignment="Center" />
                                <TextBlock
                                    Margin="0,5"
                                    Text="{Binding Status, FallbackValue=подготовка}"
                                    TextAlignment="Center"
                                    TextWrapping="Wrap" />
                                <TextBlock
                                    Margin="0,5"
                                    Text="{Binding DetailedStatus}"
                                    TextAlignment="Center"
                                    TextWrapping="Wrap"
                                    Visibility="{Binding DetailedStatus, Converter={StaticResource NullOrEmptyToVisibilityConverter}}" />
                                <ProgressBar
                                    MinHeight="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"
                                    Margin="0,5"
                                    IsIndeterminate="True" />
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:NoData}">
        <Style.Resources>
            <SolidColorBrush x:Key="fillNoDataControlBackGeometryBrush" Color="#FFF7F7F7" />
            <SolidColorBrush x:Key="fillNoDataControlGeometryBrush" Color="#CC119EDA" />
            <SolidColorBrush x:Key="fillNoDataControlGeometryPathBrush" Color="#FF086F9E" />
            <SolidColorBrush x:Key="strokeNoDataControlGeometryBrush" Color="#FF086F9E" />
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />

        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NoData}">
                    <AdornerDecorator>
                        <Border
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10">
                            <Grid Name="nodata" Margin="15">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="5" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Viewbox
                                    MaxHeight="64"
                                    HorizontalAlignment="Center"
                                    SnapsToDevicePixels="True">
                                    <TextBlock
                                        helpers:RelativeFontSize.RelativeFontSize="1.5"
                                        Foreground="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                        Text="🤷‍" />
                                    <!-- ⚠️-->
                                </Viewbox>
                                <Label Grid.Row="1" />
                                <TextBlock
                                    Grid.Row="2"
                                    VerticalAlignment="Bottom"
                                    helpers:RelativeFontSize.RelativeFontSize="1.5"
                                    TextAlignment="Center"
                                    TextOptions.TextFormattingMode="Ideal"
                                    TextWrapping="Wrap">
                                    <TextBlock.Text>
                                        <PriorityBinding>
                                            <Binding Path="Message" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:NoData}}" />
                                            <Binding Source="{StaticResource StringNoData}" />
                                        </PriorityBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </Grid>
                            <Border.Effect>
                                <DropShadowEffect
                                    Direction="330"
                                    Opacity="0.8"
                                    ShadowDepth="1"
                                    Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}" />
                            </Border.Effect>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ContentWithDescription}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="DescriptionForeground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="DescriptionFontSize" Value="{DynamicResource NormalFontSize}" />
        <Setter Property="DescriptionFontFamily" Value="{DynamicResource DefaultFont}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ContentWithDescription}">
                    <DockPanel>
                        <ContentPresenter x:Name="content" DockPanel.Dock="{Binding Path=ContentDock, RelativeSource={RelativeSource TemplatedParent}}" />
                        <TextBlock
                            VerticalAlignment="Center"
                            FontFamily="{Binding Path=DescriptionFontFamily, RelativeSource={RelativeSource TemplatedParent}}"
                            FontSize="{Binding Path=DescriptionFontSize, RelativeSource={RelativeSource TemplatedParent}}"
                            Foreground="{Binding Path=DescriptionForeground, RelativeSource={RelativeSource TemplatedParent}}"
                            LineHeight="15"
                            LineStackingStrategy="BlockLineHeight"
                            Text="{Binding Path=Description, FallbackValue='!NOT DEFINED!', RelativeSource={RelativeSource TemplatedParent}}"
                            TextAlignment="Center"
                            TextWrapping="Wrap" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ContentDock, RelativeSource={RelativeSource Self}}" Value="Left">
                            <Setter TargetName="content" Property="Margin" Value="0,0,5,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ContentDock, RelativeSource={RelativeSource Self}}" Value="Top">
                            <Setter TargetName="content" Property="Margin" Value="0,0,0,2" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ContentDock, RelativeSource={RelativeSource Self}}" Value="Right">
                            <Setter TargetName="content" Property="Margin" Value="5,0,0,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ContentDock, RelativeSource={RelativeSource Self}}" Value="Bottom">
                            <Setter TargetName="content" Property="Margin" Value="0,2,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ButtonWithDescription}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonWithDescription}">
                    <DockPanel>
                        <Button
                            x:Name="btn"
                            Command="{Binding Path=Command, RelativeSource={RelativeSource TemplatedParent}}"
                            DockPanel.Dock="{Binding Path=ButtonDock, FallbackValue=Right, RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal">
                                <local:Icons
                                    x:Name="icon"
                                    Width="{Binding Path=ImageSize, RelativeSource={RelativeSource TemplatedParent}}"
                                    Height="{Binding Path=ImageSize, RelativeSource={RelativeSource TemplatedParent}}"
                                    Kind="{Binding Path=ImageKind, RelativeSource={RelativeSource TemplatedParent}}">
                                    <local:Icons.Effect>
                                        <DropShadowEffect
                                            x:Name="iconDropShadowEffect"
                                            BlurRadius="2"
                                            Opacity="0"
                                            ShadowDepth="2" />
                                    </local:Icons.Effect>
                                </local:Icons>
                                <TextBlock
                                    Margin="5,0,0,0"
                                    Text="{Binding Path=Command.Header, FallbackValue=BUTTON, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextAlignment="Center" />
                            </StackPanel>
                        </Button>
                        <TextBlock
                            VerticalAlignment="Center"
                            Foreground="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                            LineHeight="15"
                            LineStackingStrategy="BlockLineHeight"
                            Text="{Binding Path=Description, FallbackValue='!NOT DEFINED!', RelativeSource={RelativeSource TemplatedParent}}"
                            TextWrapping="Wrap" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ImageKind, RelativeSource={RelativeSource Self}}" Value="None">
                            <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ButtonDock, RelativeSource={RelativeSource Self}}" Value="Left">
                            <Setter TargetName="btn" Property="Margin" Value="0,0,5,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ButtonDock, RelativeSource={RelativeSource Self}}" Value="Top">
                            <Setter TargetName="btn" Property="Margin" Value="0,0,0,2" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ButtonDock, RelativeSource={RelativeSource Self}}" Value="Right">
                            <Setter TargetName="btn" Property="Margin" Value="5,0,0,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=ButtonDock, RelativeSource={RelativeSource Self}}" Value="Bottom">
                            <Setter TargetName="btn" Property="Margin" Value="0,2,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SelectFolderTextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SelectFolderTextBox}">
                    <AdornerDecorator>
                        <Grid Margin="0,1" DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:SelectFolderTextBox}}, ValidatesOnDataErrors=True}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" MinWidth="100" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                x:Name="PART_Label"
                                Grid.ColumnSpan="2"
                                Margin="0,0,2,0"
                                VerticalAlignment="Center"
                                Text="{Binding Label}"
                                TextAlignment="Left"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="Wrap" />
                            <AdornerDecorator
                                Grid.Row="1"
                                Grid.Column="0"
                                Margin="0">
                                <Grid>
                                    <TextBox
                                        x:Name="PART_Text"
                                        Padding="2"
                                        VerticalAlignment="Center"
                                        TextWrapping="Wrap"
                                        Validation.ErrorTemplate="{DynamicResource ValidationErrorTemplate}">
                                        <TextBox.Text>
                                            <Binding
                                                Delay="300"
                                                NotifyOnSourceUpdated="True"
                                                NotifyOnValidationError="True"
                                                Path="SelectedPath"
                                                UpdateSourceTrigger="PropertyChanged"
                                                ValidatesOnDataErrors="True"
                                                ValidatesOnNotifyDataErrors="True">
                                                <Binding.ValidationRules>
                                                    <local:DirectoryExistsRule />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>
                            </AdornerDecorator>
                            <Button
                                x:Name="PART_Select_Folder_Button"
                                Grid.Row="1"
                                Grid.Column="1"
                                Padding="2,2"
                                VerticalAlignment="Center"
                                Command="{Binding SelectFolder}"
                                Content="выбрать папку" />
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SelectFileTextBox}">
        <Style.Resources>
            <converters:TrueIfAnyOfBoolValuesConverter x:Key="TrueIfAnyOfBoolValuesConverter" />
            <ControlTemplate x:Key="errorTemplateSilverlightStyle">
                <StackPanel Orientation="Horizontal">
                    <Border
                        VerticalAlignment="Top"
                        BorderBrush="#FFdc000c"
                        BorderThickness="1"
                        CornerRadius="0.7">
                        <Grid>
                            <Polygon
                                x:Name="toolTipCorner"
                                Margin="-1"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Fill="#FFdc000c"
                                Grid.ZIndex="2"
                                IsHitTestVisible="True"
                                Points="6,6 6,0 0,0" />
                            <Polyline
                                Margin="-1"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Grid.ZIndex="3"
                                IsHitTestVisible="True"
                                Points="7,7 0,0"
                                Stroke="White"
                                StrokeEndLineCap="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="1.5" />
                            <AdornedElementPlaceholder x:Name="adorner" />
                        </Grid>
                    </Border>
                    <Border
                        x:Name="errorBorder"
                        MinHeight="24"
                        MaxWidth="267"
                        Margin="1,0,0,0"
                        Background="#FFdc000c"
                        CornerRadius="1.5"
                        IsHitTestVisible="False"
                        Opacity="0">
                        <Border.Effect>
                            <DropShadowEffect
                                BlurRadius="4"
                                Direction="315"
                                Opacity="0.4"
                                ShadowDepth="2.25"
                                Color="Black" />
                        </Border.Effect>
                        <TextBlock
                            Margin="8,3,8,3"
                            Foreground="White"
                            Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                            TextWrapping="Wrap" />
                    </Border>
                </StackPanel>
                <ControlTemplate.Triggers>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource TrueIfAnyOfBoolValuesConverter}">
                                <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
                                <Binding ElementName="toolTipCorner" Path="IsMouseOver" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                            <BeginStoryboard x:Name="fadeInStoryboard">
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="errorBorder"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="00:00:00.15" />
                                    <ThicknessAnimation
                                        FillBehavior="HoldEnd"
                                        Storyboard.TargetName="errorBorder"
                                        Storyboard.TargetProperty="Margin"
                                        From="1,0,0,0"
                                        To="5,0,0,0"
                                        Duration="00:00:00.15">
                                        <ThicknessAnimation.EasingFunction>
                                            <BackEase Amplitude="2" EasingMode="EaseOut" />
                                        </ThicknessAnimation.EasingFunction>
                                    </ThicknessAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="fadeInStoryboard" />
                            <BeginStoryboard x:Name="fadeOutStoryBoard">
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="errorBorder"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="00:00:00" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="Margin" Value="0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SelectFileTextBox}">
                    <Grid x:Name="Root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Labels" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" MinWidth="100" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            x:Name="PART_Label"
                            Grid.Column="0"
                            VerticalAlignment="Top"
                            Text="{Binding Label}"
                            TextAlignment="Left"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="Wrap" />
                        <TextBox
                            x:Name="PART_Text"
                            Grid.Column="2"
                            Margin="2,0,0,0"
                            VerticalAlignment="Top"
                            TextWrapping="Wrap"
                            Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                            <Binding Path="SelectedFile" UpdateSourceTrigger="Explicit">
                                <Binding.ValidationRules>
                                    <local:FileExistsRule />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                        <Button
                            x:Name="PART_Select_File_Button"
                            Grid.Column="3"
                            Padding="2,0"
                            VerticalAlignment="Top"
                            Command="{Binding SelectFile}">
                            <Button.Style>
                                <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
                                    <Setter Property="ContentTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock
                                                        Padding="0"
                                                        VerticalAlignment="Center"
                                                        FontFamily="Webdings"
                                                        Text="Ò" />
                                                    <TextBlock
                                                        Padding="0"
                                                        VerticalAlignment="Center"
                                                        Text="..." />
                                                </StackPanel>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:LabelledTextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LabelledTextBox}">
                    <Grid x:Name="Root" Margin="0,1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Labels" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="*" MinWidth="100" />
                        </Grid.ColumnDefinitions>

                        <TextBlock
                            x:Name="PART_Label"
                            Grid.Column="0"
                            Text="{Binding Label, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            TextAlignment="Left" />
                        <TextBox
                            x:Name="PART_Text"
                            Grid.Column="2"
                            Margin="2,0"
                            AcceptsReturn="{Binding AcceptsReturn, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            AcceptsTab="{Binding AcceptsTab, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            Style="{Binding TextStyle, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            Text="{Binding Text, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Text, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                            <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter TargetName="PART_Text" Property="Text" Value="не указано" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:LabelledTextBlock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LabelledTextBlock}">
                    <Grid x:Name="Root" Margin="0,1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Labels" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <TextBlock
                            x:Name="PART_Label"
                            Grid.Column="0"
                            Text="{Binding Label, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            TextAlignment="Left" />
                        <TextBlock
                            x:Name="PART_Text"
                            Grid.Column="2"
                            Margin="2,0"
                            Style="{Binding TextStyle, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            Text="{Binding Text, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Text, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                            <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter TargetName="PART_Text" Property="Text" Value="не указано" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:LabelledContent}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LabelledContent}">
                    <Grid Margin="0,1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Labels" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <TextBlock
                            Grid.Column="0"
                            VerticalAlignment="Center"
                            Text="{Binding Label, RelativeSource={RelativeSource TemplatedParent}}"
                            TextAlignment="Left"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="Wrap" />
                        <ContentPresenter Grid.Column="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ButtonWithIconKindControlTemplate" TargetType="local:ButtonWithIconKind">
        <Button
            x:Name="btn"
            Padding="{TemplateBinding Padding}"
            Command="{Binding Path=Command, RelativeSource={RelativeSource TemplatedParent}}"
            DockPanel.Dock="{Binding Path=ButtonDock, FallbackValue=Right, RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource TemplatedParent}}">
                <local:Icons
                    x:Name="icon"
                    Width="{Binding Path=ImageSize, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=ImageSize, RelativeSource={RelativeSource TemplatedParent}}"
                    Kind="{Binding Path=ImageKind, RelativeSource={RelativeSource TemplatedParent}}">
                    <local:Icons.Effect>
                        <DropShadowEffect
                            x:Name="iconDropShadowEffect"
                            BlurRadius="2"
                            Opacity="0"
                            ShadowDepth="2" />
                    </local:Icons.Effect>
                </local:Icons>
                <!--
                    TextBlock
                    Margin="5,0,0,0"
                    Text="{Binding Path=Command.Header, FallbackValue=BUTTON, RelativeSource={RelativeSource TemplatedParent}}"
                    TextAlignment="Center" /
                -->
                <ContentPresenter x:Name="cnt" Margin="5,0,0,0" />
            </StackPanel>
        </Button>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="icon" Property="IsEnabled" Value="False" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=ButtonDock, FallbackValue=Right, RelativeSource={RelativeSource TemplatedParent}}" Value="0">
                <Setter TargetName="cnt" Property="Margin" Value="5,2,2,2" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ButtonDock, FallbackValue=Right, RelativeSource={RelativeSource TemplatedParent}}" Value="1">
                <Setter TargetName="cnt" Property="Margin" Value="2,5,2,2" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type local:ButtonWithIconKind}" TargetType="local:ButtonWithIconKind">
        <Setter Property="Padding" Value="10,2" />
        <Setter Property="Template" Value="{StaticResource ButtonWithIconKindControlTemplate}" />
    </Style>

    <Style x:Key="ButtonDropDownFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="1"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonDropDownStyle"
        BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource BlackColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource WhiteColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush8}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush6}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush10}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:DropDownButton}">
        <Setter Property="ArrowBrush" Value="{DynamicResource BlackColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource WhiteColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BlackColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ButtonStyle" Value="{DynamicResource ButtonDropDownStyle}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonDropDownFocusVisual}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DropDownButton}">
                    <Border
                        x:Name="PART_Border"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        UseLayoutRounding="True">
                        <Button
                            x:Name="PART_Button"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            Command="{TemplateBinding Command}"
                            CommandParameter="{TemplateBinding CommandParameter}"
                            CommandTarget="{TemplateBinding CommandTarget}"
                            FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <DockPanel
                                x:Name="PART_Content"
                                Focusable="False"
                                LastChildFill="True">
                                <Rectangle
                                    x:Name="PART_Rectangle"
                                    Width="10"
                                    Height="6"
                                    Margin="0,0,3,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    DockPanel.Dock="Right"
                                    Fill="{TemplateBinding ArrowBrush}"
                                    UseLayoutRounding="False"
                                    Visibility="{TemplateBinding ArrowVisibility}">
                                    <Rectangle.OpacityMask>
                                        <VisualBrush Stretch="Fill">
                                            <VisualBrush.Visual>
                                                <Canvas
                                                    Width="18"
                                                    Height="18"
                                                    Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                                    UseLayoutRounding="False">
                                                    <Path
                                                        Canvas.Left="14.9063"
                                                        Canvas.Top="15.75"
                                                        Width="18"
                                                        Height="16"
                                                        Data="F1 M 23.9063,25L 25.9063,23L 32.9063,15.75L 32.9063,22.25L 23.9062,31.75L 14.9063,22.25L 14.9063,15.75L 21.9063,23L 23.9063,25 Z "
                                                        Fill="{DynamicResource BlackColorBrush}"
                                                        Stretch="Fill" />
                                                </Canvas>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                                <StackPanel
                                    x:Name="PART_ContentOrientation"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    Orientation="Horizontal">
                                    <ContentPresenter
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Icon}"
                                        ContentTemplate="{TemplateBinding IconTemplate}"
                                        Focusable="False"
                                        RecognizesAccessKey="True"
                                        UseLayoutRounding="False" />
                                    <ContentControl
                                        x:Name="PART_ButtonContent"
                                        Margin="3"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        UseLayoutRounding="False" />
                                </StackPanel>
                            </DockPanel>
                            <Button.ContextMenu>
                                <ContextMenu
                                    x:Name="PART_Menu"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                    IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                    ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                                    ItemStringFormat="{TemplateBinding ItemStringFormat}"
                                    ItemTemplate="{TemplateBinding ItemTemplate}"
                                    ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    ItemsSource="{TemplateBinding ItemsSource}"
                                    StaysOpen="{Binding StayMenuOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{TemplateBinding MenuStyle}" />
                            </Button.ContextMenu>
                        </Button>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="PART_ButtonContent" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_ContentOrientation" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="PART_Rectangle" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="PART_Rectangle" Property="Margin" Value="0,0,0,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ArrowBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".55" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>