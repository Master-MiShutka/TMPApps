<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:bc="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:controls="clr-namespace:TMP.Wpf.CommonControls"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <Style x:Key="ButtonFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="True"
                        Stroke="{DynamicResource HighlightBrush}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="{DynamicResource Gray10}" />
            <GradientStop Offset="0.5" Color="{DynamicResource Gray8}" />
            <GradientStop Offset="0.5" Color="{DynamicResource Gray7}" />
            <GradientStop Offset="1" Color="{DynamicResource Gray2}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ButtonAccentedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="{DynamicResource AccentColor4}" />
            <GradientStop Offset="0.5" Color="{DynamicResource AccentColor3}" />
            <GradientStop Offset="0.5" Color="{DynamicResource AccentColor2}" />
            <GradientStop Offset="1" Color="{DynamicResource AccentColor}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ButtonHighlightedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="{DynamicResource AccentColor3}" />
            <GradientStop Offset="0.5" Color="{DynamicResource AccentColor2}" />
            <GradientStop Offset="0.5" Color="{DynamicResource AccentColor}" />
            <GradientStop Offset="1" Color="{DynamicResource HighlightColor}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}" />
        <Setter Property="Control.Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="3" />
        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <theme:ButtonChrome
                        x:Name="Chrome"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        RenderDefaulted="{TemplateBinding Button.IsDefaulted}"
                        RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                        RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Margin="{TemplateBinding Control.Padding}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </theme:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter TargetName="Chrome" Property="theme:ButtonChrome.RenderDefaulted" Value="True" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="theme:ButtonChrome.RenderPressed" Value="True" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="TMPToggleButton"
        BasedOn="{StaticResource BaseButtonStyle}"
        TargetType="{x:Type ToggleButton}" />
    <Style
        x:Key="{x:Type RepeatButton}"
        BasedOn="{StaticResource BaseButtonStyle}"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    </Style>
    <!--  style for default button  -->
    <Style
        x:Key="TMPButton"
        BasedOn="{StaticResource BaseButtonStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="AccentedButtonStyle"
        BasedOn="{StaticResource TMPButton}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonAccentedBackgroundBrush}" />
    </Style>

    <Style
        x:Key="HighlightedButtonStyle"
        BasedOn="{StaticResource TMPButton}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonHighlightedBackgroundBrush}" />
    </Style>

    <Style
        x:Key="TMPAccentButton"
        BasedOn="{StaticResource TMPButton}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
    </Style>

    <Style x:Key="TMPFlatButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}" />
        <Setter Property="Control.Background" Value="{DynamicResource FlatButtonBackgroundBrush}" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Foreground" Value="{DynamicResource FlatButtonForegroundBrush}" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="10,5,10,5" />
        <Setter Property="FontSize" Value="{DynamicResource FlatButtonFontSize}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <theme:ButtonChrome
                        x:Name="Chrome"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        RenderDefaulted="{TemplateBinding Button.IsDefaulted}"
                        RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                        RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Margin="{TemplateBinding Control.Padding}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </theme:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter TargetName="Chrome" Property="theme:ButtonChrome.RenderDefaulted" Value="True" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="theme:ButtonChrome.RenderPressed" Value="True" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource FlatButtonPressedBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  "Chromeless" style for buttons  -->
    <ControlTemplate x:Key="ChromelessButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Grid Background="{TemplateBinding Background}">
            <ContentPresenter
                x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Opacity="0.75"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ChromelessButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrushKey}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template" Value="{StaticResource ChromelessButtonTemplate}" />
    </Style>

    <!--  base button style for min, max and close window buttons  -->
    <Style x:Key="TMPBaseWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Opacity="0.75"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SemiTransparentWhiteBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  default button style for min, max window buttons  -->
    <Style
        x:Key="TMPWindowButtonStyle"
        BasedOn="{StaticResource TMPBaseWindowButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Width" Value="34" />
        <Setter Property="MaxHeight" Value="34" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  default button style for close window buttons  -->
    <Style
        x:Key="TMPWindowCloseButtonStyle"
        BasedOn="{StaticResource TMPWindowButtonStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#EB2F2F" />
                <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#7C0000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  DropDown Button  -->
    <ControlTemplate x:Key="DropDownButtonHorizontal" TargetType="{x:Type controls:DropDownButton}">
        <Button
            x:Name="PART_Button"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            CommandTarget="{TemplateBinding CommandTarget}">
            <StackPanel
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Orientation="Horizontal">
                <ContentPresenter
                    Height="{TemplateBinding Height}"
                    Content="{TemplateBinding Icon}"
                    RecognizesAccessKey="True" />
                <ContentControl
                    x:Name="PART_ButtonContent"
                    MinWidth="20"
                    Margin="3"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Content="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ContentStringFormat="{TemplateBinding ItemStringFormat}"
                    ContentTemplate="{TemplateBinding ItemTemplate}" />
                <Rectangle
                    Name="PART_Rectangle"
                    Width="10"
                    Height="6"
                    Margin="0,0,3,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="{DynamicResource BlackColorBrush}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill">
                            <VisualBrush.Visual>
                                <Canvas
                                    Width="18"
                                    Height="18"
                                    Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                    UseLayoutRounding="False">
                                    <Path
                                        Canvas.Left="14.9063"
                                        Canvas.Top="15.75"
                                        Width="18"
                                        Height="16"
                                        Data="F1 M 23.9063,25L 25.9063,23L 32.9063,15.75L 32.9063,22.25L 23.9062,31.75L 14.9063,22.25L 14.9063,15.75L 21.9063,23L 23.9063,25 Z "
                                        Fill="{DynamicResource BlackColorBrush}"
                                        Stretch="Fill" />
                                </Canvas>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </StackPanel>
            <Button.ContextMenu>
                <ContextMenu
                    Name="PART_Menu"
                    MinWidth="{TemplateBinding ActualWidth}"
                    DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                    IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                    ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                    ItemStringFormat="{TemplateBinding ItemStringFormat}"
                    ItemTemplate="{TemplateBinding ItemTemplate}"
                    ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    ItemsSource="{TemplateBinding ItemsSource}"
                    StaysOpen="False" />
            </Button.ContextMenu>
        </Button>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Rectangle" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <ControlTemplate x:Key="DropDownButtonVertical" TargetType="{x:Type controls:DropDownButton}">
        <Button
            x:Name="PART_Button"
            Width="{TemplateBinding Width}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            CommandTarget="{TemplateBinding CommandTarget}">
            <Button.Content>
                <StackPanel
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Orientation="Vertical">
                    <ContentPresenter
                        Height="{TemplateBinding Height}"
                        Content="{TemplateBinding Icon}"
                        RecognizesAccessKey="True" />
                    <ContentControl
                        x:Name="PART_ButtonContent"
                        MinHeight="20"
                        Margin="3"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        VerticalContentAlignment="Stretch"
                        Content="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        ContentStringFormat="{TemplateBinding ItemStringFormat}"
                        ContentTemplate="{TemplateBinding ItemTemplate}" />
                    <Rectangle
                        Name="PART_Rectangle"
                        Width="10"
                        Height="6"
                        Margin="0,0,0,3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Fill="{DynamicResource BlackColorBrush}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill">
                                <VisualBrush.Visual>
                                    <Canvas
                                        Width="18"
                                        Height="18"
                                        Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                        UseLayoutRounding="False">
                                        <Path
                                            Canvas.Left="14.9063"
                                            Canvas.Top="15.75"
                                            Width="18"
                                            Height="16"
                                            Data="F1 M 23.9063,25L 25.9063,23L 32.9063,15.75L 32.9063,22.25L 23.9062,31.75L 14.9063,22.25L 14.9063,15.75L 21.9063,23L 23.9063,25 Z "
                                            Fill="{DynamicResource BlackColorBrush}"
                                            Stretch="Fill" />
                                    </Canvas>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Rectangle.OpacityMask>
                    </Rectangle>
                </StackPanel>
            </Button.Content>
            <Button.ContextMenu>
                <ContextMenu
                    Name="PART_Menu"
                    MinWidth="{TemplateBinding ActualWidth}"
                    DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                    IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                    ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                    ItemStringFormat="{TemplateBinding ItemStringFormat}"
                    ItemTemplate="{TemplateBinding ItemTemplate}"
                    ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    ItemsSource="{TemplateBinding ItemsSource}"
                    StaysOpen="False" />
            </Button.ContextMenu>
        </Button>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Rectangle" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style TargetType="{x:Type controls:DropDownButton}">
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BlackColorBrush}" />
        <Setter Property="Template" Value="{StaticResource DropDownButtonHorizontal}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource DropDownButtonVertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--  Split Button  -->
    <ControlTemplate x:Key="SplitButtonHorizontal" TargetType="{x:Type controls:SplitButton}">
        <Border
            Name="PART_Border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid
                x:Name="PART_Container"
                Width="{TemplateBinding Width}"
                Height="{TemplateBinding Height}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Popup
                    Name="PART_Popup"
                    MinWidth="{TemplateBinding ActualWidth}"
                    IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    PlacementTarget="{Binding ElementName=PART_Button}"
                    PopupAnimation="Fade"
                    StaysOpen="True">
                    <ListBox
                        x:Name="PART_ListBox"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                        ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                        ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                        ItemStringFormat="{TemplateBinding ItemStringFormat}"
                        ItemTemplate="{TemplateBinding ItemTemplate}"
                        ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        ItemsSource="{TemplateBinding ItemsSource}"
                        SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        SelectedItem="{Binding SelectedItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        SelectionMode="Single"
                        Style="{DynamicResource VirtualisedMetroListBox}" />
                </Popup>
                <Button
                    x:Name="PART_Button"
                    Grid.Column="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Command="{TemplateBinding Command}"
                    CommandParameter="{TemplateBinding CommandParameter}"
                    CommandTarget="{TemplateBinding CommandTarget}">
                    <StackPanel
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Orientation="Horizontal">
                        <ContentPresenter Content="{TemplateBinding Icon}" RecognizesAccessKey="True" />
                        <ContentControl
                            x:Name="PART_ButtonContent"
                            MinWidth="20"
                            Margin="2"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            Content="{Binding SelectedItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ContentStringFormat="{TemplateBinding ItemStringFormat}"
                            ContentTemplate="{TemplateBinding ItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                    </StackPanel>
                </Button>
                <Button
                    x:Name="PART_Expander"
                    Grid.Column="1"
                    Width="25"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Center"
                    VerticalContentAlignment="Center">
                    <Button.Content>
                        <Rectangle
                            Name="PART_Rectangle"
                            Width="10"
                            Height="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Fill="{DynamicResource BlackColorBrush}">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill">
                                    <VisualBrush.Visual>
                                        <Canvas
                                            Width="18"
                                            Height="18"
                                            Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                            UseLayoutRounding="False">
                                            <Path
                                                Canvas.Left="14.9063"
                                                Canvas.Top="15.75"
                                                Width="18"
                                                Height="16"
                                                Data="F1 M 23.9063,25L 25.9063,23L 32.9063,15.75L 32.9063,22.25L 23.9062,31.75L 14.9063,22.25L 14.9063,15.75L 21.9063,23L 23.9063,25 Z "
                                                Fill="{DynamicResource BlackColorBrush}"
                                                Stretch="Fill" />
                                        </Canvas>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Button.Content>
                </Button>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Button" Property="IsFocused" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger SourceName="PART_Expander" Property="IsFocused" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Rectangle" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SplitButtonVertical" TargetType="{x:Type controls:SplitButton}">
        <Border
            Name="PART_Border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid
                x:Name="PART_Container"
                Width="{TemplateBinding Width}"
                Height="{TemplateBinding Height}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Popup
                    Name="PART_Popup"
                    MinWidth="{TemplateBinding ActualWidth}"
                    IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    PlacementTarget="{Binding ElementName=PART_Expander}"
                    PopupAnimation="Fade"
                    StaysOpen="True">
                    <ListBox
                        x:Name="PART_ListBox"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                        ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                        ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                        ItemStringFormat="{TemplateBinding ItemStringFormat}"
                        ItemTemplate="{TemplateBinding ItemTemplate}"
                        ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        ItemsSource="{TemplateBinding ItemsSource}"
                        SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        SelectedItem="{Binding SelectedItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        SelectionMode="Single" />
                </Popup>
                <Button
                    x:Name="PART_Button"
                    Grid.Row="0"
                    Width="{TemplateBinding Width}"
                    MinHeight="20"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Command="{TemplateBinding Command}"
                    CommandParameter="{TemplateBinding CommandParameter}"
                    CommandTarget="{TemplateBinding CommandTarget}">
                    <Button.Content>
                        <StackPanel
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Orientation="Vertical">
                            <ContentPresenter Content="{TemplateBinding Icon}" RecognizesAccessKey="True" />
                            <ContentControl
                                x:Name="PART_ButtonContent"
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                Content="{Binding SelectedItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentStringFormat="{TemplateBinding ItemStringFormat}"
                                ContentTemplate="{TemplateBinding ItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                        </StackPanel>
                    </Button.Content>
                </Button>
                <Button
                    x:Name="PART_Expander"
                    Grid.Row="1"
                    Height="20"
                    HorizontalAlignment="Stretch"
                    HorizontalContentAlignment="Center"
                    VerticalContentAlignment="Center">
                    <Button.Content>
                        <Rectangle
                            Name="PART_Rectangle"
                            Width="10"
                            Height="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Fill="{DynamicResource BlackColorBrush}">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill">
                                    <VisualBrush.Visual>
                                        <Canvas
                                            Width="18"
                                            Height="18"
                                            Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                            UseLayoutRounding="False">
                                            <Path
                                                Canvas.Left="14.9063"
                                                Canvas.Top="15.75"
                                                Width="18"
                                                Height="16"
                                                Data="F1 M 23.9063,25L 25.9063,23L 32.9063,15.75L 32.9063,22.25L 23.9062,31.75L 14.9063,22.25L 14.9063,15.75L 21.9063,23L 23.9063,25 Z "
                                                Fill="{DynamicResource BlackColorBrush}"
                                                Stretch="Fill" />
                                        </Canvas>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Button.Content>
                </Button>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Button" Property="IsFocused" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger SourceName="PART_Expander" Property="IsFocused" Value="True">
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Rectangle" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type controls:SplitButton}">
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource SplitButtonHorizontal}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SplitButtonVertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>