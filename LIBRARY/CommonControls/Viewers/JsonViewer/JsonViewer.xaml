<UserControl
    x:Class="TMP.Wpf.CommonControls.Viewers.JsonViewer"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconpack="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:jlinq="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json"
    xmlns:local="clr-namespace:TMP.Wpf.CommonControls.Viewers"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:templateSelectors="clr-namespace:TMP.Wpf.CommonControls.Viewers.TemplateSelectors"
    xmlns:valueConverters="clr-namespace:TMP.Wpf.CommonControls.Viewers.ValueConverters"
    d:DesignHeight="300"
    d:DesignWidth="600"
    mc:Ignorable="d">
    <UserControl.Resources>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="2,0" />
            <Setter Property="TextAlignment" Value="Left" />
        </Style>
        <valueConverters:MethodToValueConverter x:Key="MethodToValueConverter" />
        <valueConverters:ComplexPropertyMethodToValueConverter x:Key="ComplexPropertyMethodToValueConverter" />
        <valueConverters:JValueConverter x:Key="JValueConverter" />
        <valueConverters:JPropertyTypeToColorConverter x:Key="JPropertyTypeToColorConverter" />
        <valueConverters:JValueTypeToColorConverter x:Key="JValueTypeToColorConverter" />
        <valueConverters:JArrayLengthConverter x:Key="JArrayLengthConverter" />
        <HierarchicalDataTemplate DataType="{x:Type jlinq:JArray}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Margin="1" FontWeight="Bold" Text="{Binding Converter={StaticResource JArrayLengthConverter}, 
                StringFormat={}Массив из {0} элементов}" />
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate
            x:Key="ArrayPropertyTemplate"
            DataType="{x:Type jlinq:JProperty}"
            ItemsSource="{Binding Converter={StaticResource ComplexPropertyMethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Margin="1" Foreground="{DynamicResource AccentColorBrush}">
                <TextBlock.Text>
                    <MultiBinding StringFormat="~ {0} : массив из {1} элементов">
                        <Binding Path="Name" Mode="OneWay" />
                        <Binding Mode="OneWay" Converter="{StaticResource JArrayLengthConverter}"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate
            x:Key="ObjectPropertyTemplate"
            DataType="{x:Type jlinq:JProperty}"
            ItemsSource="{Binding Converter={StaticResource ComplexPropertyMethodToValueConverter}, ConverterParameter='Children'}">
            <StackPanel Margin="1" Orientation="Horizontal">
                <TextBlock Text="{Binding Path=Name, Mode=OneWay}" />
                <TextBlock Text=" : " />
                <TextBlock Foreground="#729fcf" Text="{}{ }" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <DataTemplate x:Key="PrimitivePropertyTemplate" DataType="{x:Type jlinq:JProperty}">

            <Grid Margin="1" Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="header"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding Path=Name, Mode=OneWay}" />
                <TextBlock Text=" : " Grid.Column="1"/>
                <TextBlock Grid.Column="2"
                    Foreground="{Binding Converter={StaticResource JPropertyTypeToColorConverter}}"
                    MouseLeftButtonDown="JValue_OnMouseLeftButtonDown"
                    Text="{Binding Path=Value, Converter={StaticResource JValueConverter}}"
                    TextWrapping="Wrap" />
            </Grid>
        </DataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jlinq:JObject}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <StackPanel Margin="1" Orientation="Horizontal">
                <TextBlock Text=" " />
                <TextBlock Foreground="#729fcf" Text="{}{ }" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jlinq:JConstructor}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Constructor" />
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jlinq:JRaw}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Raw" />
        </HierarchicalDataTemplate>

        <templateSelectors:JPropertyDataTemplateSelector
            x:Key="JPropertyDataTemplateSelector"
            ArrayPropertyTemplate="{StaticResource ArrayPropertyTemplate}"
            ObjectPropertyTemplate="{StaticResource ObjectPropertyTemplate}"
            PrimitivePropertyTemplate="{StaticResource PrimitivePropertyTemplate}" />

        <DataTemplate DataType="{x:Type jlinq:JValue}">
            <TextBlock Foreground="{Binding Converter={StaticResource JValueTypeToColorConverter}}"
                MouseLeftButtonDown="JValue_OnMouseLeftButtonDown"
                Text="{Binding Converter={StaticResource JValueConverter}}"
                TextWrapping="Wrap" />
        </DataTemplate>
        <Style x:Key="TreeViewItemStyle" BasedOn="{StaticResource TMPTreeViewItem}" TargetType="{x:Type TreeViewItem}">
            <Style.Resources>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="Padding" Value="2,0" />
                    <Setter Property="TextAlignment" Value="Left" />
                </Style>
            </Style.Resources>
            <Setter Property="IsExpanded" Value="False" />
        </Style>
        <ControlTemplate x:Key="TreeViewItemControlTemplate" TargetType="{x:Type TreeViewItem}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="Width" Value="16"/>
                            <Setter Property="Height" Value="16"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                            <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="White" Stroke="#FF818181">
                                                <Path.RenderTransform>
                                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                    <Condition Property="IsChecked" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                            </MultiTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                    <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Border>
                <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="False">
                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    <DockPanel Visibility="Visible">
        <StackPanel
            Background="{DynamicResource AccentBaseColorBrush}"
            DockPanel.Dock="Top"
            Orientation="Horizontal">
            <Button
                Margin="5,1"
                Padding="5,0"
                Click="CollapseAll"
                Content="Свернуть все" />
            <Button
                Margin="5,1"
                Padding="5,0"
                Click="ExpandAll"
                Content="Развернуть все" />
            <Label
                Margin="5,0"
                Padding="0"
                Content="Двойной клик копирует значение в буфер обмена" />
        </StackPanel>
        <TreeView
            Name="JsonTreeView"
            Padding="5"
            BorderThickness="0"
            DockPanel.Dock="Bottom"
            IsTextSearchEnabled="True"
            VirtualizingPanel.IsVirtualizing="True"
            VirtualizingPanel.VirtualizationMode="Recycling"
            Style="{StaticResource TMPTreeView}"
            ItemTemplateSelector="{StaticResource JPropertyDataTemplateSelector}" ItemContainerStyle="{DynamicResource TreeViewItemStyle}"/>
    </DockPanel>
</UserControl>
