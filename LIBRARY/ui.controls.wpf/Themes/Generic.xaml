<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:controls="clr-namespace:TMP.UI.Controls.WPF"
    xmlns:converters="clr-namespace:TMP.UI.Controls.WPF.Converters"
    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">

    <ResourceDictionary.MergedDictionaries>
        <!--  ResourceDictionary Source="/PresentationFramework.Royale;component/themes/royale.normalcolor.xaml" /  -->
        <ResourceDictionary Source="/ui.controls.wpf;component/Themes/NoDataTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter" />
    <converters:ItemsControlItemsToVisibilityConverter x:Key="ItemsControlItemsToVisibilityConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />

    <converters:TrueIfAnyOfBoolValuesConverter x:Key="TrueIfAnyOfBoolValuesConverter" />
    <converters:IndexConverter x:Key="IndexConverter" />
    <converters:ItemsControlItemIndexConverter x:Key="ItemsControlItemIndexConverter" />
    <converters:ParametersToOneConverter x:Key="ParametersToOneConverter" />
    <converters:UnderLineTextToSpaceConverter x:Key="UnderLineTextToSpaceConverter" />
    <converters:ExpandCollapseToggleMargin x:Key="ExpandCollapseToggleMargin" />

    <FontFamily x:Key="DefaultFont">Segoe UI, Lucida Sans Unicode, Verdana</FontFamily>
    <System:Double x:Key="NormalFontSize">14</System:Double>
    <System:Double x:Key="HeaderFontSize">16</System:Double>
    <System:Double x:Key="SmallFontSize">12</System:Double>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="LineHeight" Value="15" />
    </Style>

    <System:Double x:Key="iconSize">24</System:Double>

    <Style
        x:Key="GridSplitterStyle"
        BasedOn="{StaticResource {x:Type GridSplitter}}"
        TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="ResizeDirection" Value="Columns" />
        <Setter Property="ShowsPreview" Value="True" />
        <Setter Property="PreviewStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Fill="#80000000" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <TextBlock
                                Margin="1,0"
                                Padding="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                Text="⁞"
                                TextOptions.TextFormattingMode="Ideal" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="HorizontalGridSplitterStyle"
        BasedOn="{StaticResource GridSplitterStyle}"
        TargetType="{x:Type GridSplitter}">
        <Setter Property="MinHeight" Value="3" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>
    <Style
        x:Key="VerticalGridSplitterStyle"
        BasedOn="{StaticResource GridSplitterStyle}"
        TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="3" />
    </Style>

    <Style TargetType="{x:Type controls:Icons}">
        <Setter Property="Height" Value="{StaticResource iconSize}" />
        <Setter Property="Width" Value="{StaticResource iconSize}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Icons}">
                    <Grid>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="{TemplateBinding BorderThickness}">
                            <Viewbox Margin="{TemplateBinding Padding}">
                                <Path
                                    Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter={converters:NullToUnsetValueConverter}}"
                                    Fill="{TemplateBinding Foreground}"
                                    SnapsToDevicePixels="True"
                                    Stretch="Uniform"
                                    UseLayoutRounding="True" />
                            </Viewbox>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="5,0" />
    </Style>

    <Style
        x:Key="HorizontalListBox"
        BasedOn="{StaticResource {x:Type ListBox}}"
        TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Type ListBoxItem}}" TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border
                                    x:Name="Border"
                                    BorderThickness="1"
                                    CornerRadius="3">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold" />
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ExpandCollapseToggleBackground" StartPoint="0,0" EndPoint="1,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset=".2" Color="White" />
            <GradientStop Offset="1" Color="#FFC0B7A6" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Name="rootBorder"
                        Width="{Binding FontSize, RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                        Height="{Binding FontSize, RelativeSource={RelativeSource AncestorType=ToggleButton}}">
                        <Border
                            Name="border"
                            Background="{StaticResource ExpandCollapseToggleBackground}"
                            BorderBrush="{StaticResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                            BorderThickness="1"
                            CornerRadius="1"
                            SnapsToDevicePixels="True">
                            <Path
                                Name="ExpandPath"
                                Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"
                                Fill="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}"
                                Stretch="Fill">
                                <Path.Margin>
                                    <MultiBinding Converter="{StaticResource ExpandCollapseToggleMargin}">
                                        <Binding ElementName="rootBorder" Path="ActualWidth" />
                                        <Binding Path="IsChecked" RelativeSource="{RelativeSource AncestorType=ToggleButton}" />
                                    </MultiBinding>
                                </Path.Margin>
                            </Path>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Data" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z" />
                            <Setter TargetName="border" Property="VerticalAlignment" Value="Center" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlusMinusExpander" TargetType="{x:Type Expander}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type Expander}}, Path=Header, Mode=OneWay}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Rectangle
                            x:Name="DisabledVisualElement"
                            Fill="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}"
                            IsHitTestVisible="false"
                            Opacity="0" />
                        <DockPanel x:Name="ExpanderRoot">
                            <Border
                                x:Name="HeaderSite"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                DockPanel.Dock="Top">
                                <DockPanel>
                                    <ToggleButton
                                        x:Name="ToggleSite"
                                        Margin="2"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        DockPanel.Dock="Left"
                                        FocusVisualStyle="{x:Null}"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource ExpandCollapseToggleStyle}" />
                                    <ContentPresenter
                                        Margin="{TemplateBinding Padding}"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                        RecognizesAccessKey="True" />
                                </DockPanel>
                            </Border>
                            <Border
                                x:Name="ExpandSite"
                                Margin="5,0,0,1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,0,1,1"
                                DockPanel.Dock="Bottom"
                                Focusable="false"
                                Opacity="0"
                                Visibility="Collapsed">
                                <ContentPresenter
                                    Margin="{TemplateBinding Padding}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Cursor="{TemplateBinding Cursor}" />
                            </Border>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="1"
                                            Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="0"
                                            Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xcdg:HierarchicalGroupByControl}">
        <Setter Property="NoGroupContent" Value="Для группировки данных, перетащи сюда заголовок необходимой колонки" />
    </Style>

    <Style TargetType="{x:Type xcdg:ColumnManagerCell}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
    </Style>

    <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />

    <Style x:Key="alternatingDataRowStyle" TargetType="{x:Type xcdg:DataRow}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridVirtualizingPanel.ItemIndex), Converter={StaticResource rowIndexConverter}}" Value="True">
                <Setter Property="Background" Value="AliceBlue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ItemIndexSelectorStyle" TargetType="{x:Type xcdg:RowSelector}">
        <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Self}, Path=ItemIndex, Converter={StaticResource IndexConverter}}" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="IsCurrent" Value="true">
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type xcdg:Cell}">
        <Setter Property="Padding" Value="0" />
    </Style>
    <Style TargetType="{x:Type xcdg:DataRow}">
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="xcdg:RowSelector.RowSelectorStyle" Value="{StaticResource ItemIndexSelectorStyle}" />
    </Style>

</ResourceDictionary>